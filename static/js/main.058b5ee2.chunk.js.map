{"version":3,"sources":["components/Card.js","components/CardList.js","components/Header.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardsArray","map","user","Header","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","res","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAeeA,G,YAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,sBAAKF,UAAU,aAAf,UACE,6BAAKH,IACL,4BAAIC,YCUGK,G,MAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAaD,EAAOE,KAAI,SAACC,EAAMR,GACnC,OACE,cAAC,EAAD,CAEEA,GAAIK,EAAOL,GAAIA,GACfF,KAAMO,EAAOL,GAAIF,KACjBC,MAAOM,EAAOL,GAAID,OAHbC,MAQX,OAAO,qBAAKC,UAAU,WAAf,SAA2BK,MCCrBG,G,MAdA,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC7B,OACE,sBAAKV,UAAU,SAAf,UACE,6CACA,uBACEA,UAAU,iBACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,SCKHI,EAdA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,QAJZ,SAOGJ,EAAMK,YCWEC,E,kDAnBb,WAAYN,GAAQ,IAAD,8BACjB,gBACKO,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,yDAEFG,KAAKX,MAAMK,a,GAhBKQ,aCkDZC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAiBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAjB1C,EAAKX,MAAQ,CACXlB,OAAQ,GACRK,YAAa,IAJH,E,gEAQO,IAAD,OAClByB,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GACL,EAAKX,SAAS,CAAEvB,OAAQkC,S,+BAQpB,IAAD,EACyBZ,KAAKJ,MAA7BlB,EADD,EACCA,OAAQK,EADT,EACSA,YACV8B,EAAiBnC,EAAOoC,QAAO,SAACC,GACpC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASlC,EAAYiC,kBAEvD,OAAKtC,EAAOwC,OAIR,sBAAK5C,UAAU,MAAf,UACE,cAAC,EAAD,CAAQU,aAAcgB,KAAKI,iBAC3B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQmC,WAPnB,6C,GA7BKX,aCKHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.058b5ee2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n      <div className=\"card__text\">\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardsArray = robots.map((user, id) => {\r\n    return (\r\n      <Card\r\n        key={id}\r\n        id={robots[id].id}\r\n        name={robots[id].name}\r\n        email={robots[id].email}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div className=\"cardList\">{cardsArray}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Robofriends</h1>\r\n      <input\r\n        className=\"header__search\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflow: \"scroll\",\r\n        border: \"5px solid black\",\r\n        height: \"90vh\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport CardList from \"../components/CardList\";\r\nimport Header from \"../components/Header\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((users) => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchField } = this.state;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    if (!robots.length) {\r\n      return <h1>loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"app\">\r\n          <Header searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}